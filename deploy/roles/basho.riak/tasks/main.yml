---
- name: Add the OS specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: copy custom riak package
  copy: src={{ riak_custom_package }} dest=/tmp
  when: riak_custom_package != False and riak_custom_package.find('http') == -1

- name: copy custom riak package from remote
  action: get_url url={{ riak_custom_package }} dest=/tmp/
  when: riak_custom_package != False and riak_custom_package.find('http') != -1

- name: set riak packagename
  set_fact: riak_package=/tmp/{{ riak_custom_package|basename }} state=present
  when: riak_custom_package != False

- name: set riak_ee fact
  set_fact: riak_ee=yes
  when: riak_package.find('ee') != -1

# CentOS specific package installations
- include: RedHat.yml
  when: ansible_os_family  == "RedHat"

# Ubuntu specific package installations
- include: Debian.yml
  when: ansible_os_family  == "Debian"

- name: update pam configuration
  copy: src=etc_security_limits.d_riak.conf dest=/etc/security/limits.d/riak.conf owner=root group=root mode=0644

- name: mount the riak volume with optmized settings
  mount: name={{ riak_mountpoint }} src={{ riak_partition }} opts="{{riak_mount_options}}" fstype="{{riak_filesystem}}" state=mounted
  when: riak_tune_disks

- name: confgure rc.local
  template: src=etc_rc.local.j2 dest=/etc/rc.local owner=root group=root mode=0755
  notify: source rclocal
  when: riak_tune_disks

- name: create sysctl.d
  file: dest=/etc/sysctl.d state=directory

- name: configure sysctl
  template: src=etc_sysctl.d_riak.conf.j2 dest=/etc/sysctl.d/riak.conf owner=root group=root mode=0644
  notify:
    - check proc writeable
    - update sysctl

- name: copying custom beams
  copy: src={{ item }} dest="{{ riak_patch_dir }}/"
  with_fileglob:
  - "{{riak_custom_beams_dir}}/*.beam"
  when: riak_custom_beams_dir is defined
  notify:
  - restart riak
  - wait for http
  - wait for kv

- name: configure app.config
  template: src=etc_riak_app.config.j2 dest=/etc/riak/app.config
  tags: configfiles
  notify:
  - restart riak
  - wait for http
  - wait for kv

- name: configure vm.args
  template: src=etc_riak_vm.args.j2 dest=/etc/riak/vm.args
  tags: configfiles
  notify:
  - restart riak
  - wait for http
  - wait for kv

- name: start riak
  service: name=riak enabled=yes state=started

- name: wait for port to become active
  wait_for: port={{ riak_http_port }}

- name: wait for riak_kv service to start
  riak: wait_for_service=kv

- name: ping riak
  riak: command=ping
  register: info
